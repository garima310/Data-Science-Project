#DAY 1: Loading & Basic Inspection
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.decomposition import PCA
from scipy.stats import zscore
import warnings
warnings.filterwarnings('ignore')

# Load Excel file
file_path = "disgenet_21_01_25.xlsx"
xls = pd.ExcelFile(file_path)
df = xls.parse(xls.sheet_names[0])

print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
print(df.head())
print(df.info())

os.makedirs("eda_plots", exist_ok=True)

#DAY 2: Missing Values & Data Cleaning
missing = df.isnull().mean().sort_values(ascending=False)
missing.plot(kind='bar', figsize=(12, 5), title='Missing Value Ratios')
plt.tight_layout()
plt.savefig("eda_plots/day2_missing_values.png")
plt.close()

# Drop columns with >90% missing
threshold = 0.9
cols_dropped = missing[missing > threshold].index.tolist()
df.drop(columns=cols_dropped, inplace=True)
print(f"Dropped columns: {cols_dropped}")

# Fill missing values
for col in df.select_dtypes(include=np.number).columns:
    df[col].fillna(df[col].mean(), inplace=True)
for col in df.select_dtypes(include='object').columns:
    df[col].fillna(df[col].mode()[0], inplace=True)

# Z-score outlier detection and removal
z_scores = np.abs(zscore(df.select_dtypes(include=np.number)))
df = df[(z_scores < 3).all(axis=1)]

#DAY 3: Descriptive Statistics & Distributions
print("\nDescriptive statistics:")
print(df.describe())

skew_kurt = pd.DataFrame({
    "Skewness": df.skew(numeric_only=True),
    "Kurtosis": df.kurt(numeric_only=True)
})
print("\nSkewness and Kurtosis:")
print(skew_kurt)

num_cols = df.select_dtypes(include=np.number).columns
df[num_cols].hist(bins=20, figsize=(15, 10))
plt.tight_layout()
plt.savefig("eda_plots/day3_histograms.png")
plt.close()

# KDE plots
for col in num_cols:
    sns.kdeplot(df[col], shade=True)
    plt.title(f'KDE of {col}')
    plt.tight_layout()
    plt.savefig(f"eda_plots/day3_kde_{col}.png")
    plt.close()

#DAY 4: Categorical Analysis & Label Encoding
cat_cols = df.select_dtypes(include='object').columns
for col in cat_cols:
    vc = df[col].value_counts().head(10)
    vc.plot(kind='bar', title=f'Top Values of {col}')
    plt.tight_layout()
    plt.savefig(f"eda_plots/day4_top_{col}.png")
    plt.close()

le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col].astype(str))

# Unique values
unique_vals = df.nunique()
print("\nUnique value counts per column:")
print(unique_vals)
